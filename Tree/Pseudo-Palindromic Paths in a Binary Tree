// Pseudo-Palindromic Paths in a Binary Tree


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def solve(self, root, net):
        if root == None:
            return 0
        
        if root.left == None and root.right == None:
            leaf = root.val
            net[leaf] += 1
            
            odd = 0
            for key in net:
                if net[key] % 2 == 1:
                    odd += 1
            
            net[leaf] -= 1
            if odd <= 1:
                return 1
            return 0
        
        a = root.val
        
        net[a] += 1
        
        left = self.solve(root.left, net)
        right = self.solve(root.right, net)
        
        net[a] -= 1
            
        return (left + right)
            
    
    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:
        net = defaultdict(int)
        
        ans = self.solve(root, net)  # (root, netMap)
        
        return ans
        