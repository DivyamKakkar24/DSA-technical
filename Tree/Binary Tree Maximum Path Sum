// LC: 124 (Similar to 'Diameter of Binary Tree' pattern).

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        self.maxSum = float('-inf')
        self.paths(root)
        
        return self.maxSum
    
    
    def paths(self, root):
        if root == None:
            return 0
        
        left = max(self.paths(root.left), 0)
        right = max(self.paths(root.right), 0)
        
        net = left + right + root.val
        
        self.maxSum = max(self.maxSum, net)
        
        return (max(left, right) + root.val)
  