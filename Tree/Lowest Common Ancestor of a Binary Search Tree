// Lowest Common Ancestor of a Binary Search Tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def DFS(self, node, p, q):
        if node.val > p.val and node.val < q.val:
            return node
        
        if node.val < p.val:
            return self.DFS(node.right, p, q)
        
        if node.val > q.val:
            return self.DFS(node.left, p, q)
        
        return node
    
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if p.val > q.val:
            left = q
            right = p
        else:
            left = p
            right = q
        
        return self.DFS(root, left, right)

Time: O(logn), because we visit just one node in each level, so its Height of the BST
Space: O(1)
