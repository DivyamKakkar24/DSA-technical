// Generate Parentheses
// TC: O(2 ^ (2n))

class Solution:
    def solve(self, k, open_, close_, curr, ans):
        if open_ == 0 and close_ == 0 and k == 0:
            ans.append(curr)
            return
        
        if k == 0:
            self.solve(k + 1, open_ - 1, close_, curr + '(', ans)
        elif k > 0:
            if open_ > 0:
                self.solve(k + 1, open_ - 1, close_, curr + '(', ans)
            if close_ > 0:
                self.solve(k - 1, open_, close_ - 1, curr + ')', ans)
        
    
    def generateParenthesis(self, n: int) -> List[str]:
        open_ = n
        close_ = n
        
        ans = []
        curr = ""
        
        self.solve(0, open_, close_, curr, ans)
        
        return ans
        