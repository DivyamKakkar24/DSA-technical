// Unique Binary Search Trees II


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def helper(self, start, end):
        if end < start:
            return [None]
        
        all_trees = []
        
        for root in range(start, end + 1):
            left_subtrees = self.helper(start, root - 1)
            right_subtrees = self.helper(root + 1, end)
            
            for left in left_subtrees:
                for right in right_subtrees:
                    curr_root = TreeNode(root)
                    curr_root.left = left
                    curr_root.right = right
                    
                    all_trees.append(curr_root)
            
        return all_trees
    
    
    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:
        return self.helper(1, n)
        