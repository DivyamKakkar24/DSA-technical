// LC: 146
// Doubly Linked-list


class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None
        
class LRUCache:
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = dict()
        self.lru = Node(-1, -1)   # lru in right
        self.mru = Node(-1, -1)   # mru in left
        self.mru.next = self.lru
        self.lru.prev = self.mru

    def get(self, key: int) -> int:
        if key in self.cache:
            node = self.cache[key]
            self.remove(node)
            self.insert(node)
            return node.value
        else:
            return -1
        

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            node = self.cache[key]
            self.remove(node)
        if len(self.cache) == self.capacity:
            self.remove(self.lru.prev)
        self.insert(Node(key, value))
            
    
    def remove(self, node):
        del self.cache[node.key]
        node.prev.next = node.next
        node.next.prev = node.prev
    
    
    def insert(self, node):
        self.mru.next.prev = node
        node.next = self.mru.next
        self.mru.next = node
        node.prev = self.mru
        
        self.cache[node.key] = node
        
        

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)