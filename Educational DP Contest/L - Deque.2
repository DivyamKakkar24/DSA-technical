#include <bits/stdc++.h>
using namespace std;

int A[30001];
long long DP[3000 + 1][3000 + 1];


long long play(int i, int j, int turn){
    if (j == i){
        if(turn)
            return A[i];
        return 0;
    }


    if(DP[i][j] != -1)
        return DP[i][j];

    if(turn == 1){
        DP[i][j] = max(A[i] + play(i + 1, j, 0), A[j] + play(i, j - 1, 0));
    }
    else {
        DP[i][j] = min(play(i + 1, j, 1), A[j] + play(i, j - 1, 1));
    }

    return DP[i][j];
}

void solve(){
    int n;
    cin >> n;
    long long net = 0;

    for(int i = 0; i < n; i++){
        cin >> A[i];
        net += (long long)A[i];
    }

    memset(DP, -1, sizeof(DP));

    long long taroScore = play(0, n - 1, 1);

    long long jiroScore = net - taroScore;

    cout << taroScore - jiroScore;
}

int main(){
    int t = 1;

    while(t--)
        solve();

    return 0; 
}

