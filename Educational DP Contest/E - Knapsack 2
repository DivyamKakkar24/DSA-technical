import collections
from math import ceil, gcd, sqrt, log

INF = float('inf')
mod = 1000000007



def solve():
    n, W = map(int, input().split())

    Weight = [0]
    Profit = [0]

    for i in range(n):
        w, v = map(int, input().split())
        Weight.append(w)
        Profit.append(v)

    net_profit = sum(Profit)
    dp = [[INF] * (net_profit + 1) for i in range(n + 1)]
    dp[0][0] = 0
    # dp[index][value] = minimum weight


    for i in range(1, n + 1):
        for j in range(net_profit + 1):
            # discard current object
            dp[i][j] = dp[i - 1][j]

            # pick current object
            if j >= Profit[i]:
                dp[i][j] = min(dp[i][j], Weight[i] + dp[i - 1][j - Profit[i]])

    ans = 0
    for i in range(net_profit, -1, -1):
        if dp[n][i] <= W:
            ans = i
            break

    print(ans)

t = 1

while t != 0:
    solve()

    t -= 1
    