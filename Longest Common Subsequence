// Longest Common Subsequence

// 1. Recursion

class Solution:
    def lcs(self, s1, s2, i, j):
        if i == len(s1) or j == len(s2):
            return 0
        if s1[i] == s2[j]:
            return 1 + self.lcs(s1, s2, i + 1, j + 1)
        return max(self.lcs(s1, s2, i, j + 1), self.lcs(s1, s2, i + 1, j))
    
    def longestCommonSubsequence(self, s1: str, s2: str) -> int:
        ans = self.lcs(s1, s2, 0, 0)
        
        return ans


// 2. Top-down memoization 

class Solution:
    def lcs(self, s1, s2, m, n, net):
        if m == 0 or n == 0:
            return 0
        
        if net[m][n] < 0:
            if s1[m - 1] == s2[n - 1]:
                net[m][n] = 1 + self.lcs(s1, s2, m - 1, n - 1, net)
            else:
                net[m][n] = max(self.lcs(s1, s2, m - 1, n, net), self.lcs(s1, s2, m, n - 1, net))
            
        return net[m][n]
    
    def longestCommonSubsequence(self, s1: str, s2: str) -> int:
        m = len(s1)
        n = len(s2)
        net = [[-1] * (n + 1) for i in range(m + 1)]
        
        for i in range(m + 1):
            for j in range(n + 1):
                if i == 0 or j == 0:
                    net[i][j] = 0
        
        ans = self.lcs(s1, s2, m, n, net)
        
        return ans


// 3. Dynamic Programming

class Solution:
    def lcs(self, s1, s2, m, n):
        dp = [[0] * (n + 1) for i in range(m + 1)]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if s1[i - 1] == s2[j - 1]:
                    dp[i][j] = 1 + dp[i - 1][j - 1]
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        return dp[m][n]  # O(mn)
    
    def longestCommonSubsequence(self, s1: str, s2: str) -> int:
        m = len(s1)
        n = len(s2)
        
        ans = self.lcs(s1, s2, m, n)
        
        return ans
