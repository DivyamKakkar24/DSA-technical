// Disjoint Set - C++

#include <iostream>
#include <vector>
using namespace std;

vector<int> parent;

int find(int v){
	if(parent[v] == -1)
		return -1;
	return find(parent[v]);
}

void union_op(int abroot1, int abroot2){
	abroot1 = find(abroot1);
	abroot2 = find(abroot2);
	parent[abroot1] = abroot2;
}

bool isCyclic(vector<pair<int, int>>& edge_List){
	for(auto p: edge_List){
		int fromP = find(p.first);   // FIND absolute Parent of subset
		int toP = find(p.second);
		
		if(fromP == toP)
			return true;
		
		// UNION operation
		union_op(fromP, toP);
	}
	return false;
}


int main() {
	int E;   // No of edges
	int V;   // No of vertices  (0 to V - 1)
	
	cin >> E >> V;
	parent.resize(V, -1);   // Mark all vertices as separate subsets with only 1 element 
	
	vector<pair<int, int>> edge_List;   // Adjacency list
	
	for(int i = 0; i < E; i++){
		int from , to;
		cin >> from >> to;
		edge_List.push_back({from, to});
	}
	
	if(isCyclic(edge_List))
		cout << "True\n";
	else
		cout << "False\n";
	
	return 0;
}

